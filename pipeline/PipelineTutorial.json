{
	"name": "PipelineTutorial",
	"properties": {
		"activities": [
			{
				"name": "GetFileNames",
				"type": "GetMetadata",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"dataset": {
						"referenceName": "csv_ds",
						"type": "DatasetReference",
						"parameters": {
							"ContainerName": "destination",
							"FolderName": "data-factory-course",
							"FileName": "/"
						}
					},
					"fieldList": [
						"childItems"
					],
					"storeSettings": {
						"type": "AzureBlobFSReadSettings",
						"recursive": true,
						"enablePartitionDiscovery": false
					},
					"formatSettings": {
						"type": "DelimitedTextReadSettings"
					}
				}
			},
			{
				"name": "ForEachFile",
				"type": "ForEach",
				"dependsOn": [
					{
						"activity": "FilterFilesOnly",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('FilterFilesOnly').output.value",
						"type": "Expression"
					},
					"activities": [
						{
							"name": "IfFactFile",
							"type": "IfCondition",
							"dependsOn": [],
							"userProperties": [],
							"typeProperties": {
								"expression": {
									"value": "@contains(item().name,'Fact')",
									"type": "Expression"
								},
								"ifTrueActivities": [
									{
										"name": "FactFileExists",
										"type": "Copy",
										"dependsOn": [],
										"policy": {
											"timeout": "0.12:00:00",
											"retry": 0,
											"retryIntervalInSeconds": 30,
											"secureOutput": false,
											"secureInput": false
										},
										"userProperties": [],
										"typeProperties": {
											"source": {
												"type": "DelimitedTextSource",
												"storeSettings": {
													"type": "AzureBlobFSReadSettings",
													"recursive": false,
													"enablePartitionDiscovery": false
												},
												"formatSettings": {
													"type": "DelimitedTextReadSettings"
												}
											},
											"sink": {
												"type": "ParquetSink",
												"storeSettings": {
													"type": "AzureBlobFSWriteSettings",
													"copyBehavior": "PreserveHierarchy"
												},
												"formatSettings": {
													"type": "ParquetWriteSettings"
												}
											},
											"enableStaging": false,
											"translator": {
												"type": "TabularTranslator",
												"typeConversion": true,
												"typeConversionSettings": {
													"allowDataTruncation": false,
													"treatBooleanAsNumber": false
												}
											}
										},
										"inputs": [
											{
												"referenceName": "csv_ds",
												"type": "DatasetReference",
												"parameters": {
													"ContainerName": "destination",
													"FolderName": "data-factory-course",
													"FileName": {
														"value": "@item().name",
														"type": "Expression"
													}
												}
											}
										],
										"outputs": [
											{
												"referenceName": "PARQUET_DATALAKE_DS",
												"type": "DatasetReference",
												"parameters": {
													"ContainerName": "destination",
													"FolderName": "data-factory-course/silver",
													"FileName": {
														"value": "@replace(item().name,'.csv' ,'.parquet')",
														"type": "Expression"
													}
												}
											}
										]
									}
								]
							}
						}
					]
				}
			},
			{
				"name": "SuccessNotification",
				"type": "WebActivity",
				"dependsOn": [
					{
						"activity": "ForEachFile",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"method": "POST",
					"url": "https://prod-18.northcentralus.logic.azure.com:443/workflows/b8fc80b7f03c409ea0d4a2561dfe8b08/triggers/When_a_HTTP_request_is_received/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2FWhen_a_HTTP_request_is_received%2Frun&sv=1.0&sig=YfK8XbCGkk-vAzqAwCpJe95ZN2DuJrjIK9qotg-68Jk",
					"body": {
						"value": "{\n\"title\":\"Pipeline run finish\",\n\"message\":\"Demo pipeline running successfully\",\n\"color\":\"Green\",\n\"dataFactoryName\":\"@{pipeline().DataFactory}\",\n\"pipelineName\":\"@{pipeline().Pipeline}\",\n\"pipelineRunld\":\"@{pipeline().RunId}\",\n\"time\":\"@{utcNow()}\"\n}",
						"type": "Expression"
					}
				}
			},
			{
				"name": "FilterFilesOnly",
				"type": "Filter",
				"dependsOn": [
					{
						"activity": "GetFileNames",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"items": {
						"value": "@activity('GetFileNames').output.childItems",
						"type": "Expression"
					},
					"condition": {
						"value": "@equals(item().type,'File')",
						"type": "Expression"
					}
				}
			},
			{
				"name": "FailureNotification",
				"type": "WebActivity",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"method": "POST",
					"url": "https://prod-18.northcentralus.logic.azure.com:443/workflows/b8fc80b7f03c409ea0d4a2561dfe8b08/triggers/When_a_HTTP_request_is_received/paths/invoke?api-version=2016-10-01&sp=%2Ftriggers%2FWhen_a_HTTP_request_is_received%2Frun&sv=1.0&sig=YfK8XbCGkk-vAzqAwCpJe95ZN2DuJrjIK9qotg-68Jk",
					"body": {
						"title": "Pipeline run finish",
						"message": "Demo pipeline running successfully",
						"color": "Green",
						"dataFactoryName": "@{pipeline().DataFactory}",
						"pipelineName": "@{pipeline().Pipeline}",
						"pipelineRunld": "@{pipeline().RunId}",
						"time": "@{utcNow()}"
					}
				}
			}
		],
		"annotations": []
	}
}